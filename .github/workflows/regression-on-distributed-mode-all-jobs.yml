name: Regression Test on Distributed Mode All Jobs

on:
  #schedule:
  #  - cron: '0 16 * * *'
  workflow_dispatch:
    inputs:
      JobName:
        description: 'job name'
        required: true
        default: 'all-jobs'
        type: choice
        options:
          - all-jobs
      Repo:
        required: true
        default: 'nnsgmsone/matrixone'
        type: string
      Ref:
        required: true
        default: '17e7658ca70532e019a3044bdbc25adc42b069f7'
        type: string
      RunTimes:
        required: true
        default: 5
        type: int
      Scale:
        required: true
        default: 10
        type: int
      OLTP_TableNum:
        required: true
        default: 10
        type: int
      OLTP_TableSize:
        required: true
        default: 100000
        type: int
      OLTP_ThreadNum:
        required: true
        default: 1000
        type: int
      TPCC_WarehouseNum:
        required: true
        default: 10
        type: int
      TPCC_TerminalNum:
        required: true
        default: 50
        type: int

jobs:
  docker-image-build:
    runs-on: x86-runner 
    timeout-minutes: 60
    name: BUILD MO DOCKER IMAGE
    outputs:
       version: ${{ steps.prep.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.Repo }}
          ref: ${{ inputs.Ref }}
          
      - name: Prepare
        id: prep
        run: |
          LAST_COMMIT_ID=$(git rev-parse --short HEAD)
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/matrixone
          VERSION=temp-nightly-$LAST_COMMIT_ID
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          
      - name: Get image info
        run: |
          echo image-tags: ${{ steps.prep.outputs.tags }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          image: tonistiigi/binfmt:latest
          platforms:  linux/amd64
      - name: Set up Docker Buildx
        id: buildx
        uses:  docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./optools/images/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
  
  setup_mo_test_env:
    needs: docker-image-build
    runs-on: x86-runner
    timeout-minutes: 60
    name: SETUP MO TEST ENV
    steps:
      - name: Clone mo-auto-test Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          
      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install
                   
      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF
           
      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-auto --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 
       
      - name: Clean EKS ENV
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          if [ "$(kubectl -n mo-autotest get pod|grep "autotest-dis-*"|wc -l)" -ne 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl -n mo-autotest delete -f $GITHUB_WORKSPACE/mo-auto-test/mo-ben.yml;sleep 30s;fi
          aws s3 rm s3://mo-ares/mo-benchmark-test/data --recursive > /dev/null 2>&1
          #aws s3 rm s3://mo-ares/mo-benchmark-test/etl --recursive > /dev/null 2>&1
          aws s3 --recursive mv s3://mo-ares/mo-benchmark-test/etl s3://mo-ares/mo-benchmark-test/etl_$(date "+%Y%m%d%H%M%S") > /dev/null 2>&1
          
      - name: ECHO mo-bench.yaml
        run: |
          echo '${{ needs.docker-image-build.outputs.version }}'
          sed -i "s/imagetag/${{ needs.docker-image-build.outputs.version }}/" $GITHUB_WORKSPACE/mo-auto-test/mo-ben.yml
          cat $GITHUB_WORKSPACE/mo-auto-test/mo-ben.yml 
          
      - name: Create MO Cluster
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          kubectl -n mo-autotest apply -f $GITHUB_WORKSPACE/mo-auto-test/mo-ben.yml
          sleep 100s
          while true; do if [ "$(kubectl -n mo-autotest get pods --field-selector status.phase=Running|grep "autotest-dis-*"|wc -l)" -eq 6 ]; then break; else sleep 10s; continue; fi; done
          kubectl -n mo-autotest get pod
          if [ ! -d $GITHUB_WORKSPACE/mo-server-log ]; then mkdir $GITHUB_WORKSPACE/mo-server-log;fi;

  build_verification_test:
    if: ${{ inputs.JobName == 'all-jobs' }}
    name: Build Verification Test
    runs-on: x86-runner
    timeout-minutes: 120
    needs: [setup_mo_test_env,docker-image-build]
    steps: 
      - name: clone mo-tester repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tester
          path: ./mo-tester
          ref: main 
          
      - name: clone ${{ inputs.Repo }} repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.Repo }}
          ref: ${{ inputs.Ref }}    
          
      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl
          
      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install
                   
      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF 
           
      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64  
          
#       - name: alter mo-tester addr   
#         run: |
#           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
#           export KUBECONFIG=$(pwd)/eks-ci
#           export add_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
#           sed -i "s/127.0.0.1:6001/${add_ip}:6001/" $GITHUB_WORKSPACE/mo-tester/mo.yml
#           sed -i "s/60000/300000/" $GITHUB_WORKSPACE/mo-tester/mo.yml
#           cat $GITHUB_WORKSPACE/mo-tester/mo.yml    
          
#       - name: cn-0 pod prepare data
#         run: |
#            aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
#            export KUBECONFIG=$(pwd)/eks-ci
#            kubectl exec -it autotest-dis-dis-tp-cn-0 -n mo-autotest -- /bin/sh<<EOF
#            apt-get update
#            apt-get install git vim net-tools mysql-client openjdk-8-jdk -y
#            git clone https://github.com/${{ inputs.Repo }}.git
#            cd matrixone
#            git reset --hard ${{ inputs.Ref }}
#            exit
#            EOF
#            exit
           
#       - name: cn-1 pod prepare data
#         run: |
#            aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
#            export KUBECONFIG=$(pwd)/eks-ci
#            kubectl exec -it autotest-dis-dis-tp-cn-1 -n mo-autotest -- /bin/sh<<EOF
#            apt-get update
#            apt-get install git vim net-tools mysql-client openjdk-8-jdk -y
#            git clone https://github.com/${{ inputs.Repo }}.git
#            cd matrixone
#            git reset --hard ${{ inputs.Ref }}
#            exit
#            EOF
#            exit
         
#       - name: Start BVT Test
#         run: |
#           export LC_ALL="C.UTF-8"
#           locale
#           cd $GITHUB_WORKSPACE/mo-tester
#           ./run.sh -n -g -p $GITHUB_WORKSPACE/matrixone/test/distributed/cases -s /matrixone/test/distributed/resources 2>&1     
    
  ssb_benchmark_test:
    if: ${{ inputs.JobName == 'all-jobs' }}
    name: SSB BENCHMARK TEST
    runs-on: x86-runner
    timeout-minutes: 120
    needs: [setup_mo_test_env,docker-image-build,build_verification_test]
    steps:
      - name: Clone mo-ssb Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-ssb
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-ssb
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-autotest
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-autotest
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Start Load SSB ${{ inputs.Scale }}G Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          sleep 50s
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/ssb_${{ inputs.Scale }} -r -m -g
          sleep 300s

      - name: Start SSB ${{ inputs.Scale }}G multi table Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-ssb
          ./run.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -q all -s ${{ inputs.Scale }} -t 5

  tpch_benchmark_test:
    if: ${{ inputs.JobName == 'all-jobs' }}
    name: TPCH BENCHMARK TEST
    runs-on: x86-runner
    timeout-minutes: 180
    needs: [setup_mo_test_env,docker-image-build,build_verification_test,ssb_benchmark_test]
    steps:
      - name: Clone mo-tpch Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tpch
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-tpch
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-autotest
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-autotest
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Load TPCH ${{ inputs.Scale }}G Test Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          sleep 50s
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/tpch_${{ inputs.Scale }} -r -m -g
          sleep 300s

      - name: Start TPCH ${{ inputs.Scale }}G Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-tpch
          ./run.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -q all -s ${{ inputs.Scale }} -t ${{ inputs.RunTimes }}

  oltp_all_test:
    if: ${{ inputs.JobName == 'oltp_all_test' }}
    name: SYSBENCH OLTP TEST
    runs-on: x86-runner
    needs: [setup_mo_test_env,docker-image-build,build_verification_test,ssb_benchmark_test,tpch_benchmark_test]
    steps:
      - name: Clone mo-load Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load
          ref: main

      - name: Clone mo-sysbench Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-sysbench
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-sysbench
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-autotest
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-autotest
          ref: main

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
          aws configure<<EOF
          ${{ secrets.ACCESSKEY_ID }}
          ${{ secrets.SECRETACCESS_KEY }}
          us-west-2
          json
          exit
          EOF

      - name: Prepare Kubeconfig
        run: |
          aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
          export KUBECONFIG=$(pwd)/eks-ci
          if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2
          
          cd $GITHUB_WORKSPACE/mo-load
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' mo.yml

      - name: Start Prepare Data of 10-tables-100000-per-table
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-sysbench
          mysql -h${{ steps.get_mo_addr.outputs.mo_svc_ip }} -udump -p111 -P6001 -e "create database if not exists sbtest;"
          sysbench  --mysql-host=${{ steps.get_mo_addr.outputs.mo_svc_ip }} --mysql-port=6001 --mysql-user=dump --mysql-password=111 oltp_common.lua  --mysql-db=sbtest --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off  --auto_inc=off prepare

      - name: Start OLTP Point Select Test With 1000 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 1000

      - name: Start OLTP Update Test With 1000 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          ./start.sh -c cases/sysbench/update_pk_10_100000 -t 1000

      - name: Start OLTP Insert Test With 1000 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-sysbench
          mysql -h${{ steps.get_mo_addr.outputs.mo_svc_ip }} -udump -p111 -P6001 -e "create database if not exists sbtest;"
          sysbench  --mysql-host=${{ steps.get_mo_addr.outputs.mo_svc_ip }} --mysql-port=6001 --mysql-user=dump --mysql-password=111 oltp_common.lua  --mysql-db=sbtest --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off  --auto_inc=off cleanup
          sysbench  --mysql-host=${{ steps.get_mo_addr.outputs.mo_svc_ip }} --mysql-port=6001 --mysql-user=dump --mysql-password=111 oltp_common.lua  --mysql-db=sbtest --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off  --auto_inc=off prepare

          cd $GITHUB_WORKSPACE/mo-load
          ./start.sh -c cases/sysbench/simple_insert_10_100000 -t 1000

      - name: Start OLTP Delete Test With 1000 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-sysbench
          mysql -h${{ steps.get_mo_addr.outputs.mo_svc_ip }} -udump -p111 -P6001 -e "create database if not exists sbtest;"
          sysbench  --mysql-host=${{ steps.get_mo_addr.outputs.mo_svc_ip }} --mysql-port=6001 --mysql-user=dump --mysql-password=111 oltp_common.lua  --mysql-db=sbtest --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off  --auto_inc=off cleanup
          sysbench  --mysql-host=${{ steps.get_mo_addr.outputs.mo_svc_ip }} --mysql-port=6001 --mysql-user=dump --mysql-password=111 oltp_common.lua  --mysql-db=sbtest --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off  --auto_inc=off prepare

          cd $GITHUB_WORKSPACE/mo-load
          ./start.sh -c cases/sysbench/delete_pk_10_100000 -t 1000

      - name: Modify Report Database Config
        if: ${{ always() && !cancelled() }}
        run: |
          echo ${{ needs.docker-image-build.outputs.version }}
          cd $GITHUB_WORKSPACE/mo-autotest/result
          sed -i '/  SYSBENCH:*/c\  SYSBENCH: "${{ github.workspace }}\/mo-load\/report"' config.yml
          sed -i '/  host:*/c\  host: "${{secrets.REPORT_DB_ADDR}}"' config.yml
          sed -i '/  port:*/c\  port: ${{secrets.REPORT_DB_PORT}}' config.yml
          sed -i '/  user:*/c\  user: "${{secrets.REPORT_DB_USER}}"' config.yml
          sed -i '/  password:*/c\  password: "${{secrets.REPORT_DB_PASSWORD}}"' config.yml
          sed -i '/  database:*/c\  database: "${{secrets.REPORT_DB_NAME}}"' config.yml
          grep host config.yml
          grep port config.yml
          grep user config.yml
          grep SYSBENCH config.yml

  tpcc_benchmark_test:
    if: ${{ inputs.JobName == 'all-jobs' }}
    name: TPCC BENCHMARK TEST
    runs-on: x86-runner
    needs: [setup_mo_test_env,docker-image-build,build_verification_test,ssb_benchmark_test,tpch_benchmark_test,oltp_all_test]
    steps:
      - name: Clone mo-tpcc Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tpcc
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-tpcc
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-autotest
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-autotest
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Load TPCC ${{ inputs.TPCC_WarehouseNum }} Warehouse Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          sleep 50s
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/tpcc_${{ inputs.TPCC_WarehouseNum }} -r -m -g

      - name: Start TPCC ${{ inputs.TPCC_WarehouseNum }} Warehouses ${{ inputs.TPCC_TerminalNum }} terminals Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-tpcc
          cp props.mo props_${{ inputs.TPCC_WarehouseNum }}.mo
          sed -i '/.*terminals=*/c\terminals=${{ inputs.TPCC_TerminalNum }}' props_${{ inputs.TPCC_WarehouseNum }}.mo
          sed -i '/.*warehouses=*/c\warehouses=${{ inputs.TPCC_WarehouseNum }}' props_${{ inputs.TPCC_WarehouseNum }}.mo
          sed -i 's/tpcc/tpcc_${{ inputs.TPCC_WarehouseNum }}/g' props_${{ inputs.TPCC_WarehouseNum }}.mo
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' props_${{ inputs.TPCC_WarehouseNum }}.mo
          #sed -i 's/runMins=1/runMins=10/g' props_${{ inputs.TPCC_WarehouseNum }}.mo
          ./runBenchmark.sh props_${{ inputs.TPCC_WarehouseNum }}.mo         
          
  load_data_test:
    if: ${{ inputs.JobName == 'load_data_test' }}
    name: LOAD DATA TEST
    runs-on: x86-runner
    needs: [setup_mo_test_env,docker-image-build,build_verification_test,ssb_benchmark_test,tpch_benchmark_test,oltp_all_test,tpcc_benchmark_test]
    steps:
      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-autotest
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-autotest
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-autotest|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-autotest;kubectl -n mo-autotest create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-autotest get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Start LOAD DATA 20 Columns Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          echo mo_svc_ip=${{ steps.get_mo_addr.outputs.mo_svc_ip }}
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/20_columns/ -r -m -g

      - name: Start LOAD DATA 100 Columns Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/100_columns -r -m -g

      - name: Start LOAD DATA 200 Columns Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/200_columns -r -m -g
